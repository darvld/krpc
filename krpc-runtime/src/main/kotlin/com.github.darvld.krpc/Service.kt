/*
 *    Copyright 2021 Dario Valdespino.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package com.github.darvld.krpc

/**Marker for kRPC service definitions. This annotation serves as an entry point for the kRPC symbol processor.
 *
 * See the annotation arguments for customization options.
 *
 * Service definitions must be interfaces containing only methods annotated with @[UnaryCall], @[ServerStream],
 * @[ClientStream] or @[BidiStream], and complying with the corresponding signatures. Any other method will cause
 * a processing error.*/
@Target(AnnotationTarget.CLASS)
@Retention(AnnotationRetention.SOURCE)
annotation class Service(
    /**Sets the name of this service within gRPC, if none is specified, the name of the interface is used.*/
    val overrideName: String = "",
    /**Sets the name of the abstract server implementation generated by the compiler. If not specified, the
     * interface name is used in the format "${interfaceName}Provider"*/
    val providerName: String = "",
    /**Sets the name of the client implementation generated by the compiler. If not specified, the
     * interface name is used in the format "${interfaceName}Client", removing any "Service" suffix on the original name.*/
    val clientName: String = ""
)