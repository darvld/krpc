package com.github.darvld.krpc.compiler.generators

import com.github.darvld.krpc.SerializationProvider
import com.github.darvld.krpc.compiler.addClass
import com.github.darvld.krpc.compiler.buildFile
import com.github.darvld.krpc.compiler.markAsGenerated
import com.github.darvld.krpc.compiler.model.ServiceDefinition
import com.github.darvld.krpc.compiler.model.ServiceMethodDefinition
import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import io.grpc.MethodDescriptor
import java.io.OutputStream

internal class DescriptorGenerator : ServiceComponentGenerator {
    override fun generate(codeGenerator: CodeGenerator, definition: ServiceDefinition) {
        codeGenerator.createNewFile(
            Dependencies(true),
            definition.packageName,
            definition.descriptorName
        ).use { stream ->
            generateServiceDescriptor(stream, definition)
        }
    }

    fun generateServiceDescriptor(output: OutputStream, service: ServiceDefinition) {
        buildFile(service.packageName, service.descriptorName, output) {
            addClass {
                addModifiers(KModifier.INTERNAL)
                markAsGenerated()

                addKdoc(
                    """
                    Internal helper class generated by the kRPC compiler for the [%T] interface.
                         
                    This class provides method descriptors for other generated service components.
                    It should not be used in general code.
                    
                    @constructor Constructs a new [${service.descriptorName}] using a [SerializationProvider]
                    to create the marshallers for method requests/responses.
                    @param $SERIALIZATION_PROVIDER_PARAM A provider implementing a serialization format.
                    Used to generate marshallers for rpc methods.
                    """.trimIndent(),
                    service.className
                )

                // Constructor with serialization provider as parameter (used to initialized method descriptors)
                primaryConstructor(
                    FunSpec.constructorBuilder()
                        .addParameter(SERIALIZATION_PROVIDER_PARAM, SerializationProvider::class)
                        .build()
                )

                // Necessary for the `serializer` calls
                addImport("kotlinx.serialization", "serializer")

                // Generate helper method definitions
                for (method in service.methods) {
                    val descriptor = buildMethodDescriptor(method, service)

                    addMarshaller(method.requestType)
                    addMarshaller(method.responseType)

                    addProperty(descriptor)
                }
            }
        }
    }

    fun buildMethodDescriptor(
        method: ServiceMethodDefinition,
        service: ServiceDefinition,
    ): PropertySpec = with(method) {
        return PropertySpec.builder(
            method.declaredName,
            MethodDescriptor::class.asTypeName().parameterizedBy(requestType, responseType)
        ).run {
            markAsGenerated()
            mutable(false)
            addKdoc(
                DESCRIPTOR_KDOC.trimIndent(),
                "${service.declaredName}.${method.declaredName}",
                "${service.packageName}.${service.declaredName}.${method.declaredName}"
            )
            initializer(
                CodeBlock.builder()
                    .addStatement("MethodDescriptor")
                    .addStatement("  .newBuilder<%T, %T>()", requestType, responseType)
                    .addStatement("  .setFullMethodName(%S)", qualifiedName(service.serviceName))
                    .addStatement("  .setType(%M)", methodType.asMember())
                    .addStatement("  .setRequestMarshaller(%L)", requestType.marshallerPropName)
                    .addStatement("  .setResponseMarshaller(%L)", responseType.marshallerPropName)
                    .addStatement("  .build()")
                    .build()
            )
            build()
        }
    }

    companion object {
        const val SERIALIZATION_PROVIDER_PARAM = "serializationProvider"

        const val DESCRIPTOR_KDOC = """
        Generated gRPC [MethodDescriptor] for the [%L][%L] method.
        
        This descriptor is used by generated service components and should not be used in general code.
        """

        private fun MethodDescriptor.MethodType.asMember(): MemberName {
            return MemberName(ClassName("io.grpc", "MethodDescriptor", "MethodType"), name)
        }
    }
}
