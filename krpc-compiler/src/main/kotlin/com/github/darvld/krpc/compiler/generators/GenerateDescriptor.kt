package com.github.darvld.krpc.compiler.generators

import com.github.darvld.krpc.SerializationProvider
import com.github.darvld.krpc.compiler.addClass
import com.github.darvld.krpc.compiler.buildFile
import com.github.darvld.krpc.compiler.markAsGenerated
import com.github.darvld.krpc.compiler.model.ServiceDefinition
import com.github.darvld.krpc.compiler.model.ServiceMethodDefinition
import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import io.grpc.MethodDescriptor
import io.grpc.MethodDescriptor.MethodType.*
import java.io.OutputStream

internal const val SERIALIZATION_PROVIDER_PARAM = "serializationProvider"

internal inline val ClassName.marshallerPropName: String
    get() = "${simpleName.replaceFirstChar { it.lowercaseChar() }}Marshaller"

/**Generate a helper class containing descriptors and marshallers required to implement a [service]. The class is
 * written to a file through [output].
 *
 * @see generateServiceProviderBase
 * @see generateClientImplementation*/
fun generateServiceDescriptor(output: OutputStream, service: ServiceDefinition) {
    buildFile(service.packageName, service.descriptorName, output) {
        addClass {
            addModifiers(KModifier.INTERNAL)
            markAsGenerated()

            addKdoc(
                "Internal helper class generated by the Krpc compiler," +
                        " This class is intended to be used only by generated declarations and should not" +
                        " be used in general code.\n\n" +
                        "@param $SERIALIZATION_PROVIDER_PARAM A provider implementing a serialization format." +
                        " Used to generate marshallers for rpc methods."
            )

            // Constructor with serialization provider as parameter (used to initialized method descriptors)
            primaryConstructor(
                FunSpec.constructorBuilder()
                    .addParameter(SERIALIZATION_PROVIDER_PARAM, SerializationProvider::class)
                    .build()
            )

            // Necessary for the `serializer` calls
            addImport("kotlinx.serialization", "serializer")

            // Generate helper method definitions
            service.methods.forEach {
                addServiceMethodDescriptor(service, it)
            }
        }
    }
}

internal fun TypeSpec.Builder.addServiceMethodDescriptor(service: ServiceDefinition, method: ServiceMethodDefinition) {
    val requestType = method.requestType.let { type ->
        if (method.methodType == CLIENT_STREAMING || method.methodType == BIDI_STREAMING) {
            (type as ParameterizedTypeName).typeArguments.single()
        } else {
            type
        }
    }
    val returnType = method.returnType.let {
        if (method.methodType == SERVER_STREAMING || method.methodType == BIDI_STREAMING) {
            (it as ParameterizedTypeName).typeArguments.single()
        } else {
            it
        }
    }

    PropertySpec.builder(
        name = method.declaredName,
        type = MethodDescriptor::class.asTypeName().parameterizedBy(requestType, returnType)
    ).addKdoc(
        """
        A generated [MethodDescriptor] for the [%L] method.
        
        This descriptor is used by generated client and server implementations. It should not be
        used in general code.
        """.trimIndent(),
        "${service.declaredName}.${method.declaredName}"
    )
        .markAsGenerated()
        .mutable(false)
        .initializer(
            CodeBlock.builder()
                .addStatement("MethodDescriptor")
                .addStatement("  .newBuilder<%T, %T>()", requestType, returnType)
                .addStatement("  .setFullMethodName(%S)", method.qualifiedName(service.serviceName))
                .addStatement("  .setType(%L)", "MethodDescriptor.MethodType.${method.methodType.name}")
                .addStatement("  .setRequestMarshaller(%L)", getOrAddMarshaller(requestType))
                .addStatement("  .setResponseMarshaller(%L)", getOrAddMarshaller(returnType))
                .addStatement("  .build()")
                .build()
        )
        .build()
        .let(::addProperty)
}