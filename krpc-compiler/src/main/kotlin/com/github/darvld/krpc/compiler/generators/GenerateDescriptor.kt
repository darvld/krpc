package com.github.darvld.krpc.compiler.generators

import com.github.darvld.krpc.SerializationProvider
import com.github.darvld.krpc.compiler.asClassName
import com.github.darvld.krpc.compiler.markAsGenerated
import com.github.darvld.krpc.compiler.model.ServiceDefinition
import com.github.darvld.krpc.compiler.model.ServiceMethodDefinition
import com.google.devtools.ksp.processing.Resolver
import com.squareup.kotlinpoet.*
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import io.grpc.MethodDescriptor
import java.io.OutputStream

const val SERIALIZATION_PROVIDER_PARAM = "serializationProvider"

private inline val ClassName.marshallerPropName: String
    get() = "${simpleName.replaceFirstChar { it.lowercaseChar() }}Marshaller"

fun Resolver.generateDescriptorContainer(output: OutputStream, service: ServiceDefinition) {
    FileSpec.builder(service.packageName, service.descriptorName).apply {
        // Helper class definition
        val descriptorContainer = TypeSpec.classBuilder(service.descriptorName).apply {
            addModifiers(KModifier.INTERNAL)
            markAsGenerated()

            addKdoc(
                "Internal helper class generated by the Krpc compiler," +
                        " This class is intended to be used only by generated declarations and should not" +
                        " be used in general code.\n\n" +
                        "@param $SERIALIZATION_PROVIDER_PARAM A provider implementing a serialization format." +
                        " Used to generate marshallers for rpc methods."
            )

            // Constructor with serialization provider as parameter (used to initialized method descriptors)
            primaryConstructor(
                FunSpec.constructorBuilder()
                    .addParameter(SERIALIZATION_PROVIDER_PARAM, SerializationProvider::class)
                    .build()
            )

            // Necessary for the `serializer` calls
            addImport("kotlinx.serialization", "serializer")

            // Generate helper method definitions
            service.methods.forEach {
                addServiceMethodDescriptor(this@generateDescriptorContainer, service.serviceName, it)
            }
        }.build()

        addType(descriptorContainer)
    }.build().let { spec ->
        output.writer().use(spec::writeTo)
    }
}

private fun TypeSpec.Builder.addMarshaller(typeName: ClassName): PropertySpec {

    val propName = typeName.marshallerPropName

    // Avoid re-generating the same marshaller
    propertySpecs.find { it.name == propName }?.let { return it }

    val marshallerType = MethodDescriptor.Marshaller::class.asTypeName()
        .parameterizedBy(typeName)

    return PropertySpec.builder(propName, marshallerType, KModifier.PRIVATE)
        .markAsGenerated()
        .addKdoc(
            """
            |A generated [MethodDescriptor.Marshaller] obtained using the serializationProvider constructor param.
            |""".trimMargin(),
        )
        .mutable(false)
        .initializer("$SERIALIZATION_PROVIDER_PARAM.marshallerFor(serializer())")
        .build()
        .also(::addProperty)
}

private fun TypeSpec.Builder.addServiceMethodDescriptor(
    resolver: Resolver,
    serviceName: String,
    definition: ServiceMethodDefinition
) {
    val requestType = definition.request.type.resolve().asClassName()
    val responseType = (definition.returnType?.resolve() ?: resolver.builtIns.unitType).asClassName()

    val type = MethodDescriptor::class.asTypeName()
        .parameterizedBy(requestType, responseType)

    PropertySpec.builder(definition.methodName, type)
        .addKdoc(
            """
            |A generated [MethodDescriptor] for the [%L] service method.
            |
            |This descriptor is used by generated client and server implementations. It should not be
            |used in general code.
            |""".trimMargin(),
            "$serviceName.${definition.methodName}"
        )
        .markAsGenerated()
        .mutable(false)
        .initializer(
            """
                |MethodDescriptor.newBuilder<%T,%T>()
                |    .setFullMethodName(%S)
                |    .setType(%L)
                |    .setRequestMarshaller(%N)
                |    .setResponseMarshaller(%N)
                |    .build()
                |""".trimMargin(),
            requestType, responseType,
            "$serviceName/${definition.methodName}", "MethodDescriptor.MethodType.${definition.methodType.name}",
            addMarshaller(requestType), addMarshaller(responseType)
        )
        .build()
        .let(::addProperty)
}