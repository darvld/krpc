plugins {
    id 'io.github.gradle-nexus.publish-plugin'

    // Prevent the Kotlin plugin from applied multiple times in subprojects
    id 'org.jetbrains.kotlin.multiplatform' apply false
}

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        google()
    }
}

// Setup publishing and signing secrets
ext {
    // Use system environment variables (for CI) or default to empty values
    ossrhUsername = System.getenv('OSSRH_USERNAME') ?: ''
    ossrhPassword = System.getenv('OSSRH_PASSWORD') ?: ''
    sonatypeStagingProfileId = System.getenv('SONATYPE_STAGING_PROFILE_ID') ?: ''

    signingKeyId = System.getenv('SIGNING_KEY_ID') ?: ''
    signingPassword = System.getenv('SIGNING_PASSWORD') ?: ''
    signingKey = System.getenv('SIGNING_KEY') ?: ''

    // Read local.properties file if it exists
    def secretPropsFile = project.rootProject.file('local.properties')
    if (secretPropsFile.exists()) {
        def props = new Properties()
        new FileInputStream(secretPropsFile).withCloseable { stream -> props.load(stream) }

        props.each { name, value -> ext[name] = value }
    }
}


// Sonatype OSSRH publication setup
nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = sonatypeStagingProfileId
            username = ossrhUsername
            password = ossrhPassword

            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

// Common publishing configuration for subprojects
subprojects {
    // Sample is never published
    if (name == 'sample') return

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group = publishGroupId
    version = publishVersion

    signing {
        useInMemoryPgpKeys(signingKeyId, signingKey.replace("\\n", "\n"), signingPassword)
        sign publishing.publications
    }

    // Setup metadata for all Maven publications
    extensions.getByType(PublishingExtension).publications.withType(MavenPublication).configureEach {
        pom {
            description.set "Idiomatic gRPC library for Kotlin Multiplatform"
            url.set "https://github.com/darvld/krpc"

            licenses {
                license {
                    name.set "Apache License 2.0"
                    url.set "https://www.apache.org/licenses/LICENSE-2.0"
                }
            }

            developers {
                developer {
                    id.set 'darvld'
                    name.set 'Dario Valdespino'
                    email.set 'dvaldespino00@gmail.com'
                }
            }

            scm {
                connection.set 'scm:git:github.com/darvld/krpc.git'
                developerConnection.set 'scm:git:ssh://github.com/darvld/krpc.git'
                url.set 'https://github.com/darvld/krpc/tree/main'
            }
        }
    }
}